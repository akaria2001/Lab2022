
1) Re-write os_update.sh in  Python
2) Look at defining the lab in json and write a script to create the lab from json - will use toml instead, see point 12 below
3) Example to show remote images :- lxc image list -c lat images: -f csv 'alpine'
4) Start standardising names for variables, arrays and functions, current a mix between bouncyCaps and hyphenated naming, need to make this consistant
5) Add logging
6) Push files to hosts - for example -  `lxc file push $HOME/bin/readme.lxc.md above-dragon/tmp/`
7) Setup Ansible on Host
8) Setup automatic SSH access - https://ubuntu.com/blog/howto-automatically-import-your-public-ssh-keys-into-lxd-instances
9) Check to see instance exists - if it does then shut it down and re-configure it based on values in toml file, don't attempt to create it.
   If instance doesn't exist, then create it and configure it based on values in toml file
10) Add banner to web app :- https://ordinarycoders.com/blog/article/hero-banners
11) Currently passing lab as json to Jinja Template and processing it there which is messy, next interation will process Json first into dict and then send to template, also need to process and format presented data
11) Use lxc instance user.comments for tags to display in web front end, will add following columns
    - protected
    - cpu
    - memory

import platform,socket,re,uuid,json,psutil,logging

def getSystemInfo():
    try:
        info={}
        info['platform']=platform.system()
        info['platform-release']=platform.release()
        info['platform-version']=platform.version()
        info['architecture']=platform.machine()
        info['hostname']=socket.gethostname()
        info['ip-address']=socket.gethostbyname(socket.gethostname())
        info['mac-address']=':'.join(re.findall('..', '%012x' % uuid.getnode()))
        info['processor']=platform.processor()
        info['ram']=str(round(psutil.virtual_memory().total / (1024.0 **3)))+" GB"
        return json.dumps(info)
    except Exception as e:
        logging.exception(e)

json.loads(getSystemInfo())
Output Sample:

{
 'platform': 'Linux',
 'platform-release': '5.3.0-29-generic',
 'platform-version': '#31-Ubuntu SMP Fri Jan 17 17:27:26 UTC 2020',
 'architecture': 'x86_64',
 'hostname': 'naret-vm',
 'ip-address': '127.0.1.1',
 'mac-address': 'bb:cc:dd:ee:bc:ff',
 'processor': 'x86_64',
 'ram': '4 GB'
}


Sunday 10th Sept

Copy default profile to new lab profile
Configure lab profile to user data
When creating VMs, ensure they use the new profile and then verify they are using the user data
User data will be used to setup ansible pull

Monday 11th Sept

User data currently hard coded due to time constraint, use value setup in toml file for future iteration
Add test mode via args to quickly test new features using a stripped down toml file
frontend.py currently broken needs to be fixed


lxc init ubuntu:22.04 k8smaster-vm --vm -c security.secureboot=true
lxc config set k8smaster-vm limits.cpu 4
lxc config set k8smaster-vm limits.memory 8GB
lxc start k8smaster-vm
lxc file push microk8s_install.sh k8smaster-vm/tmp/
lxc exec k8smaster-vm -- bash /tmp/microk8s_install.sh
