
1) Re-write os_update.sh in  Python
2) Look at defining the lab in json and write a script to create the lab from json - will use toml instead, see point 12 below
3) Example to show remote images :- lxc image list -c lat images: -f csv 'alpine'
4) Start standardising names for variables, arrays and functions, current a mix between bouncyCaps and hyphenated naming, need to make this consistant
5) Add logging
6) Push files to hosts - for example -  `lxc file push $HOME/bin/readme.lxc.md above-dragon/tmp/`
7) Setup Ansible on Host
8) Setup automatic SSH access - https://ubuntu.com/blog/howto-automatically-import-your-public-ssh-keys-into-lxd-instances
9) Check to see instance exists - if it does then shut it down and re-configure it based on values in toml file, don't attempt to create it.
   If instance doesn't exist, then create it and configure it based on values in toml file
10) Add banner to web app :- https://ordinarycoders.com/blog/article/hero-banners
11) Currently passing lab as json to Jinja Template and processing it there which is messy, next interation will process Json first into dict and then send to template, also need to process and format presented data
11) Use lxc instance user.comments for tags to display in web front end, will add following columns
    - protected
    - cpu
    - memory

import platform,socket,re,uuid,json,psutil,logging

def getSystemInfo():
    try:
        info={}
        info['platform']=platform.system()
        info['platform-release']=platform.release()
        info['platform-version']=platform.version()
        info['architecture']=platform.machine()
        info['hostname']=socket.gethostname()
        info['ip-address']=socket.gethostbyname(socket.gethostname())
        info['mac-address']=':'.join(re.findall('..', '%012x' % uuid.getnode()))
        info['processor']=platform.processor()
        info['ram']=str(round(psutil.virtual_memory().total / (1024.0 **3)))+" GB"
        return json.dumps(info)
    except Exception as e:
        logging.exception(e)

json.loads(getSystemInfo())
Output Sample:

{
 'platform': 'Linux',
 'platform-release': '5.3.0-29-generic',
 'platform-version': '#31-Ubuntu SMP Fri Jan 17 17:27:26 UTC 2020',
 'architecture': 'x86_64',
 'hostname': 'naret-vm',
 'ip-address': '127.0.1.1',
 'mac-address': 'bb:cc:dd:ee:bc:ff',
 'processor': 'x86_64',
 'ram': '4 GB'
}
